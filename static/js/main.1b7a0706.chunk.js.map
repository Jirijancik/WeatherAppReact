{"version":3,"sources":["images/Clear.jpg","images/Sunny.jpg","images/Clouds.jpg","images/Drizzle.jpg","images/Rain.jpg","images/Thunderstorm.jpg","components/infoTable.js","components/headerTable.js","components/sidebarItem.js","components/sideBarTable.js","components/weatherInfoTable.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","infoTable","props","react_default","a","createElement","Fragment","infoTableData","className","currentDay","currentTime","location","weather","temperature","headerTable","src","img","alt","src_components_infoTable","sidebarItem","convertUNIXTimestampToTime","input","Date","toLocaleTimeString","hour","minute","convertUNIXTimestampToDay","getDay","time","hours","x","parseInt","slice","isGreaterThan12","onDoubleClick","propagateinfoTableData","temp","propagateInfoWeatherTableData","item","description","main","temp_min","temp_max","wind","speed","pressure","humidity","sys","sunrise","sunset","sideBarTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sidebarItemList","newForecastListTable","tempConverter","Math","round","fetch","response","json","data","setState","list","scrollEventListeners","map","src_components_sidebarItem","dt","_this2","newSidebarItemList","startX","scrollLeft","sidebarTable","document","querySelector","isDown","addEventListener","e","pageX","offsetLeft","preventDefault","walk","Component","weatherInfoTable","tempMin","tempMax","App","toCelsiusConverter","imageChanger","currentWeather","currentImage","Sunny","Clear","Clouds","Drizzle","Rain","Tuhnderstorm","sidebarItemActivation","day","currentInfoTableData","weatherInfoTableActivation","weatherDesc","weatherInfoTableData","forecastListTable","fetchDataFromAPI","adres","UNIXTime","getTime","_currentTime","name","src_components_headerTable","src_components_weatherInfoTable","components_sideBarTable","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.1b7a0706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Clear.10a7323a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Sunny.c8ba198b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Clouds.575843f4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Drizzle.b1602a91.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Rain.4cbf7c45.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.e1ed9fe4.jpg\";","import React from 'react';\nimport './infoTable.css';\n\nconst infoTable = (props) => {\n\n\n    return (\n        <React.Fragment>\n            {props.infoTableData &&\n                <React.Fragment>\n                    <div className=\"infoTable\">\n                        <h1 className=\"infoTable__header\">{props.infoTableData.currentDay}: {props.infoTableData.currentTime} - {props.location}</h1>\n\n                        <hr className=\"infoTable__hr\"></hr>\n\n                        <div className=\"infoTable__block\">\n                            <p className=\"infoTable__block__item\">{props.infoTableData.weather}</p>\n                            <p className=\"infoTable__block__item\">{props.infoTableData.temperature}</p>\n                        </div>\n                    </div>\n                </React.Fragment>\n            }\n            {!props.infoTableData &&\n                <React.Fragment>\n                    <div className=\"infoTable\">\n\n                        <h1 className=\"infoTable__header\">LOADING - {props.location}</h1>\n\n                        <hr className=\"infoTable__hr\"></hr>\n                        LOADING\n                    </div>\n                </React.Fragment>\n            }\n        </React.Fragment>\n    )\n}\n\nexport default infoTable; ","import React, { Component } from 'react';\nimport InfoTable from './infoTable';\nimport './headerTable.css';\n\nconst headerTable = (props) => {\n\n\n    return (\n        <React.Fragment>\n\n            <img className=\"headerTable\" src={props.img} alt=\"sunny\"></img>\n            <InfoTable\n                {...props}\n            ></InfoTable>\n\n        </React.Fragment>\n\n    )\n}\n\nexport default headerTable; ","import React from 'react';\r\nimport './sidebarItem.css';\r\n\r\nconst sidebarItem = (props) => {\r\n\r\n    // Function for comparing the time for day and night cycles\r\n    let isGreaterThan12 = time => {\r\n        const hours = convertUNIXTimestampToTime(props.time);\r\n        let x = parseInt(hours.slice(0, 2));\r\n        return x > 19 || x < 5;\r\n    }\r\n\r\n\r\n    // Function to conert UNIXTimestamp to Time\r\n    const convertUNIXTimestampToTime = (input) => {\r\n        var time = new Date(input * 1000);\r\n        return time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    }\r\n\r\n\r\n    // Function to conert UNIXTimestamp to Days\r\n    const convertUNIXTimestampToDay = (input) => {\r\n        let time = new Date(input * 1000);\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        return days[time.getDay()];\r\n    }\r\n\r\n\r\n    // Function called on doubleclik of sidebarItem\r\n    const onDoubleClick = (event) => {\r\n        props.propagateinfoTableData(props.temp, props.weather, convertUNIXTimestampToTime(props.time), convertUNIXTimestampToDay(props.time));\r\n        props.propagateInfoWeatherTableData(props.item.weather[0].description, props.item.main.temp_min, props.item.main.temp_max, props.item.wind.speed, props.item.main.pressure, props.item.main.humidity, props.item.sys.sunrise, props.item.sys.sunset);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={isGreaterThan12(props.time) ? \"sidebarItem night\" : \"sidebarItem day\"}\r\n                onDoubleClick={() => onDoubleClick()}\r\n            >\r\n                <p className=\"sidebarItem__time\">{convertUNIXTimestampToDay(props.time)}</p>\r\n                <p className=\"sidebarItem__time\">{convertUNIXTimestampToTime(props.time)}</p>\r\n                <p className=\"sidebarItem__temp\">{props.weather} - {props.temp}</p>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default sidebarItem; ","import React, { Component } from 'react';\r\nimport SidebarItem from './sidebarItem';\r\nimport './sidebarTable.css';\r\n\r\n\r\nclass sideBarTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            sidebarItemList: \"Loading\",\r\n            newForecastListTable: []\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        //fetching data from API (Forecast for 40 segments)\r\n        const response = await fetch('http://api.openweathermap.org/data/2.5/forecast?q=Olomouc,CZ&appid=687213f5b48935a3c97e20b678b66451');\r\n        const data = await response.json();\r\n        this.setState({\r\n            newForecastListTable: data.list\r\n        })\r\n        this.scrollEventListeners();\r\n\r\n        // Creating a list of JSX Sidebar Items by maping over Data in newForecastListTable\r\n        const newSidebarItemList = await this.state.newForecastListTable.map(item =>\r\n\r\n            <SidebarItem\r\n\r\n                item={item}\r\n\r\n                temp={tempConverter(item.main.temp)}\r\n                weather={item.weather[0].main}\r\n                time={item.dt}\r\n                propagateinfoTableData={this.props.propagateinfoTableData}\r\n                propagateInfoWeatherTableData={this.props.propagateInfoWeatherTableData}\r\n\r\n            ></SidebarItem>\r\n        )\r\n\r\n        this.setState({ sidebarItemList: newSidebarItemList });\r\n\r\n        function tempConverter(temperature) {\r\n            return Math.round((temperature) - 273.15) + '°C'\r\n        };\r\n    }\r\n\r\n\r\n    // Function for the sideBarTable scrolling\r\n    scrollEventListeners() {\r\n        const sidebarTable = document.querySelector('.sidebarTable');\r\n        let isDown = false;\r\n        let scrollingSpeed = 1;\r\n        let startX;\r\n        let scrollLeft;\r\n\r\n        sidebarTable.addEventListener('mousedown', (e) => {\r\n            isDown = true;\r\n            startX = e.pageX - sidebarTable.offsetLeft;\r\n            scrollLeft = sidebarTable.scrollLeft;\r\n        });\r\n        sidebarTable.addEventListener('mouseup', () => {\r\n            isDown = false;\r\n        });\r\n        sidebarTable.addEventListener('mouseleave', () => {\r\n            isDown = false;\r\n        });\r\n        sidebarTable.addEventListener('mousemove', (e) => {\r\n            if (!isDown) return;\r\n            e.preventDefault();\r\n            const x = e.pageX - sidebarTable.offsetLeft;\r\n            const walk = (x - startX) * scrollingSpeed;\r\n            sidebarTable.scrollLeft = scrollLeft - walk;\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"sidebarTable\" >{this.state.sidebarItemList}</div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default sideBarTable; ","import React from 'react';\r\nimport './weatherInfoTable.css';\r\n\r\nconst weatherInfoTable = (props) => {\r\n\r\n    return (\r\n\r\n        <div className=\"weatherInfoTable\">\r\n            <div className=\"wetherInfoCell\">Weather: {props.data.description}</div>\r\n            <div className=\"wetherInfoCell\">Temperature: {props.data.tempMin} - {props.data.tempMax}</div>\r\n            <div className=\"wetherInfoCell\">Wind: {props.data.wind}</div>\r\n            <div className=\"wetherInfoCell\">Pressure: {props.data.pressure}</div>\r\n            <div className=\"wetherInfoCell\">Humidity: {props.data.humidity}</div>\r\n            <div className=\"wetherInfoCell\">Sunrise: {props.data.sunrise} | Sunset: {props.data.sunset}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default weatherInfoTable; ","import React, { Component } from 'react';\r\nimport HeaderTable from './components/headerTable';\r\nimport SideBarTable from './components/sideBarTable';\r\nimport WeatherInfoTable from './components/weatherInfoTable';\r\nimport Sunny from './images/Sunny.jpg';\r\nimport Clear from './images/Clear.jpg';\r\nimport Clouds from './images/Clouds.jpg';\r\nimport Drizzle from './images/Drizzle.jpg';\r\nimport Rain from './images/Rain.jpg';\r\nimport Tuhnderstorm from './images/Thunderstorm.jpg';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      location: \"Olomouc\",\r\n      currentInfoTableData: {},\r\n      weatherInfoTableData: {},\r\n      currentImage: \"Loading\",\r\n      forecastListTable: [],\r\n      currentDay: \"Loading\",\r\n      currentTime: '',\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // Component did mount LifeCycle\r\n  async componentDidMount() {\r\n    this.fetchDataFromAPI('https://api.openweathermap.org/data/2.5/weather?q=Olomouc,CZ&appid=687213f5b48935a3c97e20b678b66451');\r\n  }\r\n\r\n\r\n\r\n  // Function for fetching Data from OpenWeatherApp\r\n  async fetchDataFromAPI(adres) {\r\n    const UNIXTime = Math.round(new Date().getTime() / 1000);\r\n    const _currentTime = this.convertUNIXTimestampToTime(UNIXTime);\r\n\r\n    const response = await fetch(adres);\r\n    const data = await response.json();\r\n    this.setState({\r\n      currentInfoTableData: {\r\n        currentDay: \"Today\",\r\n        weather: data.weather[0].main,\r\n        location: data.name,\r\n        temperature: this.toCelsiusConverter(data.main.temp),\r\n        currentTime: _currentTime\r\n      },\r\n      weatherInfoTableData: {\r\n        description: data.weather[0].description,\r\n        tempMin: this.toCelsiusConverter(data.main.temp_min),\r\n        tempMax: this.toCelsiusConverter(data.main.temp_max),\r\n        pressure: data.main.pressure,\r\n        humidity: data.main.humidity + '%',\r\n        wind: data.wind.speed + ' m/s',\r\n        sunrise: this.convertUNIXTimestampToTime(data.sys.sunrise),\r\n        sunset: this.convertUNIXTimestampToTime(data.sys.sunset),\r\n      },\r\n\r\n    });\r\n\r\n\r\n    await this.imageChanger(data.weather[0].main);\r\n\r\n  }\r\n\r\n\r\n  // Function for converting temperature to Celsius \r\n  toCelsiusConverter = (temperature) => Math.round((temperature) - 273.15) + '°C';\r\n\r\n\r\n  // Function to conert UNIXTimestamp to Time\r\n  convertUNIXTimestampToTime = (input) => {\r\n    var time = new Date(input * 1000);\r\n    return time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  }\r\n\r\n\r\n  // Function for selecting background images according\r\n  // to weather\r\n  imageChanger = (currentWeather) => {\r\n    switch (currentWeather) {\r\n      case \"Sunny\":\r\n        this.setState({ currentImage: Sunny });\r\n        break;\r\n      case \"Clear\":\r\n        this.setState({ currentImage: Clear });\r\n        break;\r\n      case \"Clouds\":\r\n        this.setState({ currentImage: Clouds });\r\n        break;\r\n      case \"Drizzle\":\r\n        this.setState({ currentImage: Drizzle });\r\n        break;\r\n      case \"Rain\":\r\n        this.setState({ currentImage: Rain });\r\n        break;\r\n      case \"Tuhnderstorm\":\r\n        this.setState({ currentImage: Tuhnderstorm });\r\n        break;\r\n      default: this.setState({ currentImage: Clear });\r\n\r\n    }\r\n  }\r\n\r\n\r\n  // Function for getting data from sideBar items\r\n  // to main app state\r\n  sidebarItemActivation = (temp, weather, time, day) => {\r\n    this.setState({\r\n      currentInfoTableData: {\r\n        temperature: temp,\r\n        weather: weather,\r\n        currentTime: time,\r\n        currentDay: day\r\n      }\r\n    })\r\n    this.imageChanger(weather);\r\n  }\r\n\r\n\r\n  // Function for getting data from sideBar items\r\n  // to Weather Info Table state\r\n  weatherInfoTableActivation = (weatherDesc, tempMin, tempMax, wind, pressure, humidity, sunrise, sunset) => {\r\n    this.setState({\r\n      weatherInfoTableData: {\r\n        description: weatherDesc,\r\n        tempMin: this.toCelsiusConverter(tempMin),\r\n        tempMax: this.toCelsiusConverter(tempMax),\r\n        pressure: pressure,\r\n        humidity: humidity + '%',\r\n        wind: wind + ' m/s',\r\n        sunrise: this.convertUNIXTimestampToTime(sunrise) === 'Invalid Date' ? 'N/A' : this.convertUNIXTimestampToTime(sunrise),\r\n        sunset: this.convertUNIXTimestampToTime(sunset) === 'Invalid Date' ? 'N/A' : this.convertUNIXTimestampToTime(sunrise),\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <HeaderTable\r\n          img={this.state.currentImage}\r\n          infoTableData={this.state.currentInfoTableData}\r\n          location={this.state.location}\r\n        ></HeaderTable>\r\n\r\n        <WeatherInfoTable\r\n          data={this.state.weatherInfoTableData}\r\n        ></WeatherInfoTable>\r\n\r\n        <SideBarTable\r\n          forecastListTable={this.state.forecastListTable}\r\n          propagateinfoTableData={this.sidebarItemActivation}\r\n          propagateInfoWeatherTableData={this.weatherInfoTableActivation}\r\n        ></SideBarTable>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}